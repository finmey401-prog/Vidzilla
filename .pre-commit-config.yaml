repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-docstring-first

  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=100]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --extend-ignore=E203,W503]

  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: tests/

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, types-python-dateutil]
        exclude: tests/

  - repo: local
    hooks:
      - id: pytest
        name: pytest
        entry: pytest
        language: system
        pass_filenames: false
        always_run: true
        args: [tests/, -v, --tb=short]

      - id: check-env-example
        name: check .env.example is up to date
        entry: python
        language: system
        files: '^\.env\.example$'
        args: [-c, "import os; assert os.path.exists('.env.example'), '.env.example file is required'"]

      - id: no-secrets
        name: check for secrets
        entry: python
        language: system
        files: '\.(py|yml|yaml|json|env)$'
        args: [-c, "
import sys, re;
patterns = [
  r'sk_live_[a-zA-Z0-9]{24,}',  # Stripe live keys
  r'pk_live_[a-zA-Z0-9]{24,}',  # Stripe live keys
  r'[0-9]{10}:[a-zA-Z0-9_-]{35}',  # Telegram bot tokens
  r'mongodb\+srv://[^:]+:[^@]+@',  # MongoDB connection strings with credentials
];
content = open(sys.argv[1]).read();
for pattern in patterns:
  if re.search(pattern, content):
    print(f'Potential secret found in {sys.argv[1]}');
    sys.exit(1)
"]