name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Create test environment file
      run: |
        cat > .env << EOF
        BOT_TOKEN=test_token
        RAPIDAPI_KEY=test_key
        WEBHOOK_PATH=/webhook
        WEBHOOK_URL=http://localhost:8000
        BOT_USERNAME=test_bot
        MONGODB_URI=mongodb://localhost:27017/test
        MONGODB_DB_NAME=test_db
        MONGODB_USERS_COLLECTION=users
        MONGODB_COUPONS_COLLECTION=coupons
        ADMIN_IDS=123456789
        STRIPE_PUBLISHABLE_KEY=pk_test_key
        STRIPE_SECRET_KEY=sk_test_key
        STRIPE_WEBHOOK_SECRET=whsec_test
        STRIPE_SUCCESS_URL=http://localhost:8000/success
        STRIPE_CANCEL_URL=http://localhost:8000/cancel
        EOF

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=utils --cov=handlers --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Check code formatting with black
      run: |
        black --check --line-length=100 .

    - name: Check import sorting with isort
      run: |
        isort --check-only --profile black --line-length=100 .

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json